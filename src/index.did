type Error = variant { NotFound : text; Invalidnote : text };
type Note = record {
  id : text;
  title : text;
  body : text;
  createdAt : nat64;
  updatedAt : opt nat64;
};
type NotePayload = record { title : text; body : text };
type _AzleResult = variant { Ok : Note; Err : Error };
type _AzleResult_1 = variant { Ok : vec Note; Err : Error };
service : () -> {
  addNote : (NotePayload) -> (_AzleResult);
  deleteNote : (text) -> (_AzleResult);
  getNote : (text) -> (_AzleResult) query;
  getNotes : () -> (_AzleResult_1) query;
  updateNote : (text, NotePayload) -> (_AzleResult);
}